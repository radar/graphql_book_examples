import { GraphQLClient } from 'graphql-request';
import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601DateTime: { input: any; output: any; }
};

export type Activity = {
  __typename?: 'Activity';
  event: Event;
};

/** The connection type for Activity. */
export type ActivityConnection = {
  __typename?: 'ActivityConnection';
  /** A list of edges. */
  edges: Array<ActivityEdge>;
  /** A list of nodes. */
  nodes: Array<Activity>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ActivityEdge = {
  __typename?: 'ActivityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Activity>;
};

/** Autogenerated input type of AddCategory */
export type AddCategoryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated input type of AddReview */
export type AddReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  comment: Scalars['String']['input'];
  rating: ReviewRating;
  repoId: Scalars['ID']['input'];
};

export type AddReviewResult = Review | ValidationError;

export type AttributeError = {
  __typename?: 'AttributeError';
  attribute: Scalars['String']['output'];
  errors: Array<Scalars['String']['output']>;
};

export type AuthenticatedUser = {
  __typename?: 'AuthenticatedUser';
  email?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
};

export type Category = {
  __typename?: 'Category';
  name: Scalars['String']['output'];
  repos: Array<Repo>;
};

/** Autogenerated input type of DeleteReview */
export type DeleteReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  reviewId: Scalars['ID']['input'];
};

export type Errors = {
  __typename?: 'Errors';
  attributeErrors: Array<AttributeError>;
  fullMessages: Array<Scalars['String']['output']>;
};

export type Event = Like | Review;

export type FailedLogin = {
  __typename?: 'FailedLogin';
  error: Scalars['String']['output'];
};

export type Like = {
  __typename?: 'Like';
  createdAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

export type LoginResult = AuthenticatedUser | FailedLogin;

export type Mutation = {
  __typename?: 'Mutation';
  addCategory: Category;
  addReview: AddReviewResult;
  deleteReview?: Maybe<Review>;
  login: LoginResult;
  signup: SignupResult;
  updateReview?: Maybe<Review>;
};


export type MutationAddCategoryArgs = {
  input: AddCategoryInput;
};


export type MutationAddReviewArgs = {
  input: AddReviewInput;
};


export type MutationDeleteReviewArgs = {
  input: DeleteReviewInput;
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationSignupArgs = {
  input: SignUpInput;
};


export type MutationUpdateReviewArgs = {
  input: UpdateInput;
};

export type NotFound = {
  __typename?: 'NotFound';
  message: Scalars['String']['output'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Query = {
  __typename?: 'Query';
  category: Category;
  me?: Maybe<AuthenticatedUser>;
  repo: RepoResult;
  repos: Array<Repo>;
};


export type QueryCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRepoArgs = {
  id: Scalars['ID']['input'];
};

export type Repo = {
  __typename?: 'Repo';
  activities: ActivityConnection;
  categories: Array<Category>;
  name: Scalars['String']['output'];
  nameReversed: Scalars['String']['output'];
  reviews: ReviewConnection;
  url: Scalars['String']['output'];
};


export type RepoActivitiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepoReviewsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type RepoResult = NotFound | Repo;

export type Review = {
  __typename?: 'Review';
  comment: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  rating: ReviewRating;
  user: User;
};

/** The connection type for Review. */
export type ReviewConnection = {
  __typename?: 'ReviewConnection';
  /** A list of edges. */
  edges: Array<ReviewEdge>;
  /** A list of nodes. */
  nodes: Array<Review>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ReviewEdge = {
  __typename?: 'ReviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Review>;
};

export enum ReviewRating {
  FiveStars = 'FIVE_STARS',
  FourStars = 'FOUR_STARS',
  OneStar = 'ONE_STAR',
  ThreeStars = 'THREE_STARS',
  TwoStars = 'TWO_STARS'
}

/** Autogenerated input type of SignUp */
export type SignUpInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  passwordConfirmation: Scalars['String']['input'];
};

export type SignupResult = AuthenticatedUser | ValidationError;

/** Autogenerated input type of Update */
export type UpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  comment: Scalars['String']['input'];
  rating: Scalars['String']['input'];
  reviewId: Scalars['ID']['input'];
};

export type User = {
  __typename?: 'User';
  name: Scalars['String']['output'];
};

export type ValidationError = {
  __typename?: 'ValidationError';
  errors: Errors;
};

export type LoginMutationVariables = Exact<{
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login: { __typename: 'AuthenticatedUser', email?: string | null, token?: string | null } | { __typename: 'FailedLogin', error: string } };

export type RepositoryQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RepositoryQuery = { __typename?: 'Query', repo: { __typename: 'NotFound', message: string } | { __typename: 'Repo', name: string } };

export type RepoWithReviewsQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RepoWithReviewsQuery = { __typename?: 'Query', repo: { __typename: 'NotFound' } | { __typename: 'Repo', name: string, reviews: { __typename?: 'ReviewConnection', nodes: Array<{ __typename?: 'Review', comment: string, rating: ReviewRating, user: { __typename?: 'User', name: string } }> } } };

export type RepositoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type RepositoriesQuery = { __typename?: 'Query', repos: Array<{ __typename?: 'Repo', name: string }> };


export const LoginDocument = gql`
    mutation login($email: String!, $password: String!) {
  login(input: {email: $email, password: $password}) {
    __typename
    ... on AuthenticatedUser {
      email
      token
    }
    ... on FailedLogin {
      error
    }
  }
}
    `;
export const RepositoryDocument = gql`
    query repository($id: ID!) {
  repo(id: $id) {
    __typename
    ... on Repo {
      name
    }
    ... on NotFound {
      message
    }
  }
}
    `;
export const RepoWithReviewsDocument = gql`
    query repoWithReviews($id: ID!) {
  repo(id: $id) {
    __typename
    ... on Repo {
      name
      reviews {
        nodes {
          comment
          rating
          user {
            name
          }
        }
      }
    }
  }
}
    `;
export const RepositoriesDocument = gql`
    query repositories {
  repos {
    name
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    login(variables: LoginMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LoginMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<LoginMutation>(LoginDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'login', 'mutation');
    },
    repository(variables: RepositoryQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RepositoryQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<RepositoryQuery>(RepositoryDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'repository', 'query');
    },
    repoWithReviews(variables: RepoWithReviewsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RepoWithReviewsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<RepoWithReviewsQuery>(RepoWithReviewsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'repoWithReviews', 'query');
    },
    repositories(variables?: RepositoriesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RepositoriesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<RepositoriesQuery>(RepositoriesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'repositories', 'query');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;